<?php

/**
 * @file
 *
 * Contains primary functions for the Commerce Shipstation module.
 */

/**
 * Wrapper class to ease XML CDATA using.
 */
class SimpleXMLExtended extends SimpleXMLElement {
  /**
   * Add CDATA segment.
   *
   * @param $cdata_text
   */
  public function addCData($cdata_text) {
    $node = dom_import_simplexml($this);
    $no = $node->ownerDocument;
    $node->appendChild($no->createCDATASection($cdata_text));
  }
}

/**
 * Implements hook_help().
 */
function commerce_shipstation_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce/config/shipping/shipstation':
      return t('This module provides integration with ShipStation using the !url.
                To connect your store to ShipStation using this service, fill in
                the "URL to custom XML page" field in the Custom Store Setup dialog
                with the following URL: !endpoint',
        array(
          '!url' => l(t('Custom Store Development Integration'), "http://api.shipstation.com/"),
          '!endpoint' => 'http://' . $_SERVER['HTTP_HOST'] . base_path() . 'shipstation/api-endpoint'
        ));
  }
}

/**
 * Implements hook_menu().
 */
function commerce_shipstation_menu() {
  $items['admin/commerce/config/shipping/shipstation'] = array(
    'title' => 'ShipStation',
    'description' => 'Configure ShipStation Integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipstation_admin_page'),
    'access arguments' => array('administer shipping'),
    'file' => 'commerce_shipstation.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['shipstation/api-endpoint'] = array(
    'title' => 'ShipStation API Callback URI',
    'page callback' => 'commerce_shipstation_endpoint',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Establish a service endpoint for shipstation to communicate with
 */
function commerce_shipstation_endpoint() {
  drupal_page_is_cacheable(FALSE);

  $authorized = FALSE;
  $auth_key = variable_get('commerce_shipstation_alternate_auth', '');
  $username = variable_get('commerce_shipstation_username', '');
  $password = variable_get('commerce_shipstation_password', '');

  watchdog('commerce_shipstation', 'ShipStation request: !get', array('!get' => var_export($_GET, TRUE)));

  // Allow Shipstation to authenticate using token.
  if (!empty ($_GET['auth_key'])) {
    if ($auth_key == $_GET['auth_key']) {
      $authorized = TRUE;
    }
    elseif ($auth_key != $_GET['auth_key']) {
      watchdog('commerce_shipstation', 'Wrong auth_key passed', WATCHDOG_ERROR);
    }
  }

  // Allow Shipstation to authenticate using HTTP Basic.
  if ($authorized == FALSE) {
    // No u/p combo.
    if (!isset($_SERVER['PHP_AUTH_USER'])) {
      header("WWW-Authenticate: Basic realm =\"ShipStation XML API for Drupal Commerce");
      header("HTTP/1.0 401 Unauthorized");
      print t('Error: You must enter a username and password.');
      exit;
    }
    // Empty u/p combo.
    if (empty($_SERVER['PHP_AUTH_USER']) || empty($_SERVER['PHP_AUTH_PW'])) {
      print t('Error: Basic HTTP authentication is required. Please add username and password to URL string.');
      exit;
    }
    // Bad u/p combo.
    if ($_SERVER['PHP_AUTH_USER'] != $username || ($_SERVER['PHP_AUTH_PW'] != $password && md5($_SERVER['PHP_AUTH_PW']) != $password)) {
      print t('Error: Basic HTTP authentication failed. Please check your credentials and try again.');
      exit;
    }
  }

  // If Shipstation gets past the door, run the call based on the action it defines.
  switch ($_GET['action']) {
    case "export":
      $start_date = strtotime($_GET['start_date'] . ' UTC') - 43200;
      $end_date = strtotime($_GET['end_date'] . ' UTC') + 43200;
      $page = !empty($_GET['page']) ? intval($_GET['page']) : 0;

      return commerce_shipstation_export_orders($start_date, $end_date, $page);
    case "shipnotify":
      $order_number = $_GET['order_number'];
      $tracking_number = $_GET['tracking_number'];
      $carrier = $_GET['carrier'];
      $service = $_GET['service'];
      if ($order_number && $tracking_number && $carrier && $service) {
        $commerce_order = commerce_order_load_by_number($order_number);

        $commerce_order->commerce_tracking_number[LANGUAGE_NONE][0]['value'] = $tracking_number;
        $commerce_order->commerce_shipment_carrier[LANGUAGE_NONE][0]['value'] = $carrier;
        $commerce_order->commerce_shipment_service[LANGUAGE_NONE][0]['value'] = $service;
        $order_status = variable_get('commerce_shipstation_shipment_status', '');
        if (!empty($order_status)) {
          $commerce_order->order_status = $order_status;
        }
        commerce_order_save($commerce_order);

        return rules_invoke_event('commerce_shipstation_order_success', $commerce_order, $tracking_number, $carrier, $service);
      }
      else {
        print t('Error: missing order info.');
        exit();

      }
    default:
      print t('Error: Invalid action, or no action defined.');
      exit();
  }
}

/**
 * Identify orders to send back to shipstation
 */
function commerce_shipstation_export_orders($start_date, $end_date, $page = 0) {
  $date_format = 'm/d/y H:m A';
  $status = variable_get('commerce_shipstation_export_status', array());
  $page_size = variable_get('commerce_shipstation_export_paging', 100);
  $start_page = $page > 0 ? $page - 1 : 0;

  // Determine site-specific field reference fields.
  $field_billing_phone_number = variable_get('commerce_shipstation_billing_phone_number_field', 'none');
  $field_shipping_phone_number = variable_get('commerce_shipstation_shipping_phone_number_field', 'none');
  $field_order_notes = variable_get('commerce_shipstation_order_notes_field', 'none');
  $field_customer_notes = variable_get('commerce_shipstation_customer_notes_field', 'none');
  $field_product_images = variable_get('commerce_shipstation_product_images_field', 'none');

  // Build a query to load orders matching our status.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
    ->propertyCondition('status', array_keys($status));

  // Limit our query by start date and end date unless we're
  // doing a full reload.
  if (!variable_get('commerce_shipstation_reload', 0)) {
    $query->propertyCondition('changed', array($start_date, $end_date), 'BETWEEN');
  }

  // Execute the query without the range to get a count.
  $count_result = $query->execute();

  // Add the range and re-run the query to get our records.
  $query->range($start_page * $page_size, $page_size);
  $results = $query->execute();

  // Instantiate a new XML object for our export.
  $output = new SimpleXMLExtended('<Orders></Orders>');

  // Log the request information.
  if (variable_get('commerce_shipstation_logging')) {
    watchdog('commerce_shipstation', 'Action:' . check_plain($_GET['action']) .
      ' Orders:' . (isset($results['commerce_order']) ? count($results['commerce_order']) : 0) .
      ' Since:' . format_date($start_date, 'short') . '(' . $start_date . ')' .
      ' To: ' . format_date($end_date, 'short') . '(' . $end_date . ')');
  }

  if (isset($results['commerce_order'])) {
    $orders = commerce_order_load_multiple(array_keys($results['commerce_order']));

    // Allow other modules to alter the list of orders.
    drupal_alter('commerce_shipstation_export_orders', $orders, $start_date, $end_date, $page, $page_size);

    $bundle_type = variable_get('commerce_shipstation_bundle_field', '');

    $output['pages'] = ceil(count($count_result['commerce_order']) / $page_size);

    foreach ($orders as $order) {

      // Fetch most of the data we need to define an order for ShipStation.
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      try {
        $bill = $order_wrapper->commerce_customer_billing->value() ? $order_wrapper->commerce_customer_billing->commerce_customer_address : NULL;
      } catch (Exception $ex) {
        $bill = FALSE;
      }

      try {
        $ship = $order_wrapper->commerce_customer_shipping->value() ? $order_wrapper->commerce_customer_shipping->commerce_customer_address : NULL;
      } catch (Exception $ex) {
        $ship = FALSE;
      }

      if (!$ship) {
        continue;
      }

      if (variable_get('commerce_shipstation_logging')) {
        watchdog('commerce_shipstation', 'Processing order ' . $order->order_id, array(), WATCHDOG_DEBUG);
      }

      // Get the exposed shipping methods.
      $available_methods = variable_get('commerce_shipstation_exposed_shipping_methods', '');
      $shipping_li_wrapper = commerce_shipstation_get_shipping_line_item_wrapper($order_wrapper);

      // Sanity check for a shipping method on the order.
      if (!empty($shipping_li_wrapper)) {
        $shipping_method = $shipping_li_wrapper->value()->data['shipping_service']['shipping_method'];
      }

      // Only process orders which have authorized shipping methods.
      if (!empty($shipping_method) && in_array($shipping_method, $available_methods)) {
        /*
         * @TODO: create lines with the following information:
         * -- coupons used           [provided, sort of]
         */

        // Set up the xml schema.
        $order_xml = $output->addChild('Order');

        $order_date = $order_wrapper->created->value();

        // If there are payment transactions beyond the order creation date, use those.
        foreach (commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id)) as $transaction) {
          if ($transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS && $transaction->created > $order_date) {
            $order_date = $transaction->created;
          }
        }

        $order_fields = array(
          '#cdata' => array(
            'OrderNumber' => $order_wrapper->order_number->value(),
            'OrderStatus' => $order_wrapper->status->value(),
            'ShippingMethod' => $shipping_li_wrapper->value()->data['shipping_service']['display_title'],
          ),
          '#other' => array(
            'OrderDate' => date($date_format, $order_date),
            'LastModified' => date($date_format, $order_wrapper->changed->value()),
            'OrderTotal' => $order_wrapper->commerce_order_total->amount_decimal->value(),
            'ShippingAmount' => $shipping_li_wrapper->commerce_unit_price->amount_decimal->value(),
          ),
        );

        if (strtolower($field_order_notes) != 'none') {
          try {
            $order_fields['#cdata']['InternalNotes'] = $order_wrapper->$field_order_notes->value();
          }
          catch (Exception $ex) {}
        }

        if (strtolower($field_customer_notes) != 'none') {
          try {
            $order_fields['#cdata']['CustomerNotes'] = $order_wrapper->commerce_customer_shipping->$field_customer_notes->value();
          }
          catch (Exception $ex) {}
        }

        // Add tax amount (commerce_tax module).
        $commerce_order_total = $order_wrapper->commerce_order_total->value();
        foreach ($commerce_order_total['data']['components'] as $component) {
          if (isset($component['price']['data']['tax_rate'])) {
            if (!isset($order_fields['#cdata']['TaxAmount'])) {
              $order_fields['#cdata']['TaxAmount'] = 0;
            }

            $order_fields['#cdata']['TaxAmount'] += commerce_currency_amount_to_decimal($component['price']['amount'], $component['price']['currency_code']);
          }
        }

        commerce_shipstation_addcdata($order_xml, $order_fields);

        // Billing address.
        $customer = $order_xml->addChild('Customer');

        $customer_fields = array(
          '#cdata' => array(
            'CustomerCode' => $order_wrapper->mail->value(),
          ),
        );
        commerce_shipstation_addcdata($customer, $customer_fields);

        // Billing info.
        $billing = $customer->addChild('BillTo');
        $billing_fields = array(
          '#cdata' => array(
            'Name' => $bill ? $bill->name_line->value() : '',
            'Company' => $bill ? $bill->organisation_name->value() : '',
            'Email' => $order_wrapper->mail->value(),
          ),
        );

        if (strtolower($field_billing_phone_number) != 'none') {
          try {
            $billing_fields['#cdata']['Phone'] = $order_wrapper->commerce_customer_billing->$field_billing_phone_number->value();
          }
          catch (Exception $ex){}
        }
        commerce_shipstation_addcdata($billing, $billing_fields);

        // Shipping info.
        $shipping = $customer->addChild('ShipTo');
        $shipping_fields = array(
          '#cdata' => array(
            'Name' => $ship->name_line->value(),
            'Address1' => $ship->thoroughfare->value(),
            'Address2' => $ship->premise->value(),
            'City' => $ship->locality->value(),
            'State' => $ship->administrative_area->value(),
            'PostalCode' => $ship->postal_code->value(),
            'Country' => $ship->country->value(),
          ),
        );
        if (strtolower($field_shipping_phone_number) != 'none') {
          try {
            $shipping_fields['#cdata']['Phone'] = $order_wrapper->commerce_customer_shipping->$field_shipping_phone_number->value();
          }
          catch (Exception $ex) {}
        }
        commerce_shipstation_addcdata($shipping, $shipping_fields);

        $line_items = $order_xml->addChild('Items');
        foreach ($order_wrapper->commerce_line_items as $id => $line_item_wrapper) {

          // Legacy support for gift wrapping.
          if ($line_item_wrapper->type->value() == 'giftwrap') {
            commerce_shipstation_addcdata(
              $order_xml,
              array(
                '#other' => array(
                  'Gift' => 'true',
                  'GiftMessage' => $line_item_wrapper->commerce_giftwrap_message->value(),
                ),
              )
            );

            // Gift Wrapping package
            $gift_wrapping_package = variable_get('commerce_shipstation_giftwrapping_package', '');
            if (!empty($gift_wrapping_package)) {
              commerce_shipstation_addcdata(
                $order_xml,
                array(
                  '#other' => array(
                    'packageCode' => $gift_wrapping_package,
                  ),
                )
              );
            }

            continue;
          }

          // Only proceed if the line item type is product based.
          if (!in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
            continue;
          }

          $product_wrapper = $line_item_wrapper->commerce_product;
          $weight_field = commerce_physical_entity_weight_field_name('commerce_product', $product_wrapper->value());

          $line_item = $line_items->addChild('Item');

          $line_item_cdata = array(
            'SKU' => $product_wrapper->sku->value(),
            'Name' => $product_wrapper->title->value(),
          );

          if (strtolower($field_product_images) != 'none') {
            try {
              $image = $product_wrapper->$field_product_images->value();
            }
            catch (Exception $ex) {
              $image = FALSE;
            }

            if (!empty($image)) {

              // Use the delta 0 image if it's multi-valued.
              if (is_array($image)) {
                $image = reset($image);
              }

              $line_item_cdata['ImageUrl'] = image_style_url('thumbnail', $image['uri']);
            }
          }

          $line_item_fields = array(
            '#cdata' => $line_item_cdata,
            '#other' => array(
              'Quantity' => (int) $line_item_wrapper->quantity->value(),
              'UnitPrice' => $line_item_wrapper->commerce_unit_price->amount_decimal->value(),
            ),
          );

          // Add the line item weight.
          if (!empty($weight_field) && !empty($product_wrapper->{$weight_field})) {
            commerce_shipstation_addweight($line_item_fields['#other'], $product_wrapper->{$weight_field}->weight->value(), $product_wrapper->{$weight_field}->unit->value());
          }

          commerce_shipstation_addcdata($line_item, $line_item_fields);

          // Line item options.
          // If the product contains an entity reference field (e.g., for a product bundle).
          if (isset($line_item_wrapper->$bundle_type)) {
            foreach ($line_item_wrapper->$bundle_type as $bundle_item) {
              if ($bundle_item->type() == 'commerce_product') {
                $line_item = $line_items->addChild('Item');

                $line_item_fields = array(
                  '#cdata' => array(
                    'SKU' => $bundle_item->sku->value(),
                    'Name' => $bundle_item->title->value(),
                  ),
                  '#other' => array(
                    'Quantity' => (int) $line_item_wrapper->quantity->value(),
                    'UnitPrice' => $line_item_wrapper->commerce_unit_price->amount_decimal->value(),
                  ),
                );

                // Add the bundle weight.
                $bundle_weight_field = commerce_physical_entity_weight_field_name('commerce_product', $bundle_item->value());
                if (!empty($bundle_weight_field) && !empty($bundle_item->{$bundle_weight_field})) {
                  commerce_shipstation_addweight($line_item_fields['#other'], $bundle_item->{$bundle_weight_field}->weight->value(), $bundle_item->{$bundle_weight_field}->unit->value());
                }
                commerce_shipstation_addcdata($line_item, $line_item_fields);
              }
            }
          }

          // Alter line item XML
          drupal_alter('commerce_shipstation_line_item_xml', $line_item, $line_item_wrapper->value());
        }

        // Alter order XML
        drupal_alter('commerce_shipstation_order_xml', $order_xml, $order);
      }
    }
  }

  Header('Content-type: application/xml');
  $dom = dom_import_simplexml($output)->ownerDocument;
  $dom->formatOutput = TRUE;
  print $dom->saveXML();
  exit();
}

/**
 * Returns a list of shipping service options.
 */
function commerce_shipstation_shipping_methods($methods) {
  $options = array();
  foreach ($methods as $method) {
    $title = $method["name"];
    $display = $method['display_title'];
    $options[$title] = $display;
  }

  return $options;
}

/**
 * Helper function to add CDATA segments to XML file
 */
function commerce_shipstation_addcdata($xml, $data) {
  if (isset($data['#cdata'])) {
    foreach ($data['#cdata'] as $field_name => $value) {
      $xml->{$field_name} = NULL;
      $xml->{$field_name}->addCData($value);
    }
  }
  if (isset($data['#other'])) {
    foreach ($data['#other'] as $field_name => $value) {
      $xml->{$field_name} = $value;
    }
  }
}

/**
 * Helper function to format product weight.
 */
function commerce_shipstation_addweight(&$data, $weight, $weight_units) {
  switch ($weight_units) {
    case 'g':
      $weight_units = 'Gram';
      break;
    case 'lb':
      $weight_units = 'Pounds';
      break;
    case 'oz':
      $weight_units = 'Ounces';
      break;
    case 'kg':
      $weight_units = 'Gram';
      $weight = 1000 * $weight;
      break;
  }
  $data['Weight'] = $weight;
  $data['WeightUnits'] = $weight_units;
}

/**
 * Process API request.
 */
function _commerce_shipstation_api_request($uri) {
  $uri = 'https://'
    . variable_get('commerce_shipstation_username', '') . ':' . variable_get('commerce_shipstation_password', '')
    . '@ssapi.shipstation.com' . $uri;
  $response = drupal_http_request($uri);

  return json_decode($response->data);
}

/**
 * Get list of shipment carriers available in ShipStation.
 *
 * @see http://docs.shipstation.apiary.io/#reference/carriers/list-carriers/list-carriers
 */
function _commerce_shipstation_get_carriers() {
  return _commerce_shipstation_api_request('/carriers');
}

/**
 * Get list of shipment packages for a given carrier..
 *
 * @see http://docs.shipstation.apiary.io/#reference/carriers/list-packages/list-packages
 */
function _commerce_shipstation_get_packages($carrier) {
  return _commerce_shipstation_api_request('/carriers/listpackages?carrierCode=' . urlencode($carrier));
}

/**
 * Fetch the shipping line item object on an order.

 * @param \EntityDrupalWrapper $order_wrapper
 *   A wrapped commerce order object.
 *
 * @return mixed
 */
function commerce_shipstation_get_shipping_line_item_wrapper(EntityDrupalWrapper $order_wrapper) {
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    if ($line_item->type->value() === 'shipping') {
      return $line_item;
    }
  }

  return FALSE;
}
