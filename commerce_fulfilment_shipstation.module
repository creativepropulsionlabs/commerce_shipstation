<?php 

/**
 * Implements hook_menu().
 */
function commerce_fulfilment_shipstation_menu() {
  $items = array();
  
  $items['admin/commerce/config/fulfilment/shipstation'] = array(
    'title' => 'ShipStation',
    'description' => 'Configure fulfilment for ShipStation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfilment_shipstation_admin_page'),
    'access arguments' => array('configure commerce fulfilment'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['shipstation/api-callback'] = array(
    'title' => t('ShipStation API Callback URI'),
    'page callback' => 'commerce_fulfilment_shipstation_export_orders',
    'access callback' => TRUE,
    'access arguments' => array('access commerce fulfilment'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_views_api().
 */
function commerce_fulfilment_shipstation_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_action_info().
 */
function commerce_fulfilment_shipstation_action_info() {
  
}

/**
 * Implements hook_token_info().
 */
function commerce_fulfilment_shipstation_token_info() {
}

/**
 * Implements hook_tokens().
 */
function commerce_fulfilment_shipstation_tokens($type, $tokens, array $data = array(), array $options = array()) {
}

/**
 * Implements hook_entity_view_alter().
 */
function commerce_fulfilment_entity_view_alter(&$build, $type) {
}

/**
 * Form action to send order to shipstation
 */
function commerce_fulfilment_shipstation_sendorder_formaction($form, $form_state) {
}

/**
 * Identify orders to send to shipstation
 */
function commerce_fulfilment_shipstation_export_orders() {
  $conditions = array('status' => 'processing');
  $orders = commerce_order_load_multiple(array(), $conditions);
  $output = new SimpleXMLElement( "<Orders></Orders>" );
  foreach($orders as $order) {
    // fetch most of the data we need
    $data = entity_metadata_wrapper('commerce_order', $order);
    $bill = $data->commerce_customer_billing->commerce_customer_address;
    $ship = $data->commerce_customer_shipping->commerce_customer_address;
    // get the shipping stuff
    $available_methods = variable_get('commerce_fulfilment_shipstation_exposed_shipping_methods', '');
    $order_method = commerce_fulfilment_get_shipping_lineitem($data);
    // sanity check for a shipping method on the order
    if ($order_method) {
      $order_ship = $order_method->value()->data['shipping_service']['shipping_method'];
      //print "<pre>";
        //var_dump($order_method->commerce_unit_price->amount_decimal->value());
      //print "</pre>";
    }
    
    // only process orders which have authorized shipping methods
    if ( $order_method && in_array($order_ship, $available_methods) ) {
      /* create a line with the following information:
       * 
       * tax amount             [NEED]
       * shipping amount        [part of shipping line item]
       * order notes            [NEED]
       * private order notes    [NEED]
       * coupons used           [provided, sort of]
       * customer information   [ID provided, commerce_customer_profile_load]
       * * billing email        
       * * billing name
       * * billing address
       * * shipping name
       * * shipping address
       * * etc
       * line item details      [ID provided, commerce_line_item_load is callback]
       * * SKU                  [provided through callback]
       * * name                 [provided through callback]
       * * dimensions   
       * * weight
       * * unit price           [provided through callback]
       * * item image?          [provided through callback]
       */
  
      // order number
      $item = $output->addChild( 'Order' );
      $item->OrderNumber = $data->order_number->value();
      //order_date 
      $item->OrderDate = date(DATE_W3C, $data->created->value());
      // order status
      $item->OrderStatus = $data->status->value();
      // last modified
      $item->LastModified = date(DATE_W3C, $data->changed->value());
      // shipping method
      $item->ShippingMethod = $order_method->value()->data['shipping_service']['display_title'];
      // order total
      $item->OrderTotal = $data->commerce_order_total->amount_decimal->value();
      // tax amount
      // shipping amount
      //$item->ShippingAmount = commerce_line_items_total($order_method);
      $item->ShippingAmount = $order_method->commerce_unit_price->amount_decimal->value();
      // order notes
      // coupons and discounts
      // billing address
      $customer = $item->addChild( 'Customer' );
      // billing email
      $customer->CustomerCode = $data->mail->value();
      // billing info
      $billing = $customer->addChild( 'BillTo' );
      $billing->Name = $bill->name_line->value();
      $billing->Company = $bill->organisation_name->value();
      $billing->Phone = $data->commerce_customer_billing->field_phone_number->value();
      $billing->Email = $data->mail->value();
      // shipping info
      $shipping = $customer->addChild( 'ShipTo' );
      $billing->Name = $ship->name_line->value();    
      $shipping->Address1 = $ship->thoroughfare->value();
      $shipping->Address2 = $ship->premise->value();
      $shipping->City = $ship->locality->value();
      $shipping->State = $ship->administrative_area->value();
      $shipping->PostalCode = $ship->postal_code->value();
      $shipping->Country = $ship->country->value();
      $shipping->Phone = $data->commerce_customer_shipping->field_phone_number->value();
      // line item details
      //$line_items = $item->addChild( 'Items' );
      //foreach ()
    }  
    
  }
  print "<pre>";
  var_dump($output);
  var_dump(commerce_customer_profile_load(5));
  
  //var_dump($orders);
  print "</pre>";
}

/**
 * Admin settings page
 */
function commerce_fulfilment_shipstation_admin_page() {
  $form = array();
  
  // shipstation username
  $form['commerce_fulfilment_shipstation_username'] = array(
    '#type' => 'textfield',
    '#title' => t('ShipStation Username'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_shipstation_username', ''),
  );

  // shipstation password
  $form['commerce_fulfilment_shipstation_password'] = array(
    '#type' => 'textfield',
    '#title' => t('ShipStation Password'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_shipstation_password', ''),
  );

  // shipstation API URI
  $form['commerce_fulfilment_shipstation_api_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('ShipStation API URI'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_shipstation_api_uri', ''),
  );

  // shipstation logging
  $form['commerce_fulfilment_shipstation_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log requests to ShipStation'),
    '#description' => t('If this is set, all API requests to ShipStation will be logged to Drupal watchdog.'),
    '#default_value' => variable_get('commerce_fulfilment_shipstation_logging', 0),
  );

  // shipstation alternate authentication
  $form['commerce_fulfilment_shipstation_alternate_auth'] = array(
    '#type' => 'textfield',
    '#title' => t('Alternate Authentication'),
    '#description' => t('Use this field if your web server uses CGI to run PHP.'),
    '#default_value' => variable_get('commerce_fulfilment_shipstation_alternate_auth', ''),
  );

  // shipstation export paging
  $form['commerce_fulfilment_shipstation_export_paging'] = array(
    '#type' => 'select',
    '#title' => t('Number of Records to Export per Page'),
    '#description' => t('Sets the number of orders to send to ShipStation at a time. Change this setting if you experience import timeouts.'),
    '#options' => array( 50 => 50, 75 => 75, 100 => 100, 150 => 150 ),
    '#default_value' => variable_get('commerce_fulfilment_shipstation_export_paging', '100'),
  );

  // shipstation order export status
  $form['commerce_fulfilment_shipstation_export_status'] = array(
    '#type' => 'select',
    '#title' => t('Order Status to Export into ShipStation'),
    '#required' => TRUE,
    '#options' => commerce_order_status_options_list(), 
    '#default_value' => variable_get('commerce_fulfilment_shipstation_export_status', ''),
  );

  // shipstation order import status
  $form['commerce_fulfilment_shipstation_import_status'] = array(
    '#type' => 'select',
    '#title' => t('Order Status to Set After ShipStation Import'),
    '#required' => TRUE,
    '#options' => commerce_order_status_options_list(), 
    '#default_value' => variable_get('commerce_fulfilment_shipstation_import_status', ''),
  );

  // shipstation available shipping methods
  $options = commerce_fulfilment_shipstation_shipping_methods(commerce_shipping_methods());
  $form['commerce_fulfilment_shipstation_exposed_shipping_methods'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Shipping Methods Available to ShipStation',
    '#required' => TRUE,
    '#options' => $options, // may need to be drupal_map_assoc
    '#default_value' => variable_get('commerce_fulfilment_shipstation_exposed_shipping_methods', ''),
  );

  return system_settings_form($form);
  
}

/**
 * Returns a list of shipping service options
 */
function commerce_fulfilment_shipstation_shipping_methods($methods) {
  $options = array();
  foreach($methods as $method) {
    $title   = $method["name"];
    $display = $method['display_title'];
    $options[$title] = $display;
  }
  return $options;  
}

/**
 * Connect to the OData endpoint and pass the API endpoints and credentials.
 */
function commerce_fulfilment_shipstation_getclient() {
}

/**
 * Action: Fulfil order.
 */
function commerce_fulfilment_shipstation_send_fulfilment_order_action($order, $context = array()) {
  
}

/**
 * Get tracking URL
 *
 * Should be provided by a hook ... or we build up a list of possible shipping services.
 */
function commerce_fulfilment_shipstation_get_tracking_url($method, $trackingnumber) {
}
